name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        type: string

env:
  GO_VERSION: '1.23'
  PROJECT_NAME: cqlai

jobs:
  # Build for multiple platforms
  build:
    name: Build ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            suffix: linux-amd64
          - os: linux
            arch: arm64
            suffix: linux-arm64
          - os: windows
            arch: amd64
            suffix: windows-amd64.exe
          - os: darwin
            arch: amd64
            suffix: darwin-amd64
          - os: darwin
            arch: arm64
            suffix: darwin-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Verify license files exist
        run: |
          if [ ! -d "THIRD-PARTY-LICENSES" ]; then
            echo "Error: THIRD-PARTY-LICENSES directory not found!"
            echo "Please run 'make licenses' locally and commit the files"
            exit 1
          fi

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          VERSION=${GITHUB_REF_NAME#v}
          if [ -z "$VERSION" ]; then VERSION="dev"; fi
          
          go build -ldflags="-w -s -X main.version=$VERSION" \
            -o dist/${PROJECT_NAME}-${{ matrix.suffix }} \
            ./cmd/cqlai

      - name: Create archive
        run: |
          mkdir -p archive/${PROJECT_NAME}
          # Copy binary with proper name (cqlai or cqlai.exe)
          if [ "${{ matrix.os }}" = "windows" ]; then
            cp dist/${PROJECT_NAME}-${{ matrix.suffix }} archive/${PROJECT_NAME}/${PROJECT_NAME}.exe
          else
            cp dist/${PROJECT_NAME}-${{ matrix.suffix }} archive/${PROJECT_NAME}/${PROJECT_NAME}
          fi
          cp -r THIRD-PARTY-LICENSES archive/${PROJECT_NAME}/
          cp README.md archive/${PROJECT_NAME}/
          cp LICENSE archive/${PROJECT_NAME}/
          cp cqlai.json.example archive/${PROJECT_NAME}/
          
          cd archive
          if [ "${{ matrix.os }}" = "windows" ]; then
            zip -r ../${PROJECT_NAME}-${{ matrix.suffix }}.zip ${PROJECT_NAME}
          else
            # Use --owner and --group to ensure files have root:root ownership
            tar --owner=0 --group=0 -czf ../${PROJECT_NAME}-${{ matrix.suffix }}.tar.gz ${PROJECT_NAME}
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.suffix }}
          path: |
            ${{ env.PROJECT_NAME }}-${{ matrix.suffix }}.*
          retention-days: 7

  # Build Linux packages (DEB and RPM)
  build-packages:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install FPM
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev rubygems build-essential rpm
          sudo gem install --no-document fpm

      - name: Verify license files exist
        run: |
          if [ ! -d "THIRD-PARTY-LICENSES" ]; then
            echo "Error: THIRD-PARTY-LICENSES directory not found!"
            echo "Please run 'make licenses' locally and commit the files"
            exit 1
          fi

      - name: Build binary
        env:
          GOOS: linux
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          if [ -z "$VERSION" ]; then VERSION="0.0.1"; fi
          
          go build -ldflags="-w -s -X main.version=$VERSION" \
            -o ${PROJECT_NAME} \
            ./cmd/cqlai

      - name: Prepare package structure
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          if [ -z "$VERSION" ]; then VERSION="0.0.1"; fi
          
          # Create directory structure
          mkdir -p package/usr/bin
          mkdir -p package/usr/share/doc/${PROJECT_NAME}
          mkdir -p package/etc/${PROJECT_NAME}
          
          # Copy files
          cp ${PROJECT_NAME} package/usr/bin/
          chmod 755 package/usr/bin/${PROJECT_NAME}
          
          cp -r THIRD-PARTY-LICENSES/* package/usr/share/doc/${PROJECT_NAME}/
          cp LICENSE package/usr/share/doc/${PROJECT_NAME}/
          cp README.md package/usr/share/doc/${PROJECT_NAME}/
          cp cqlai.json.example package/etc/${PROJECT_NAME}/cqlai.json.example

      - name: Build DEB package
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          if [ -z "$VERSION" ]; then VERSION="0.0.1"; fi
          
          ARCH=${{ matrix.arch }}
          if [ "$ARCH" = "amd64" ]; then DEB_ARCH="amd64"; fi
          if [ "$ARCH" = "arm64" ]; then DEB_ARCH="arm64"; fi
          
          fpm -s dir -t deb \
            --name ${PROJECT_NAME} \
            --version ${VERSION} \
            --architecture ${DEB_ARCH} \
            --description "Modern Cassandra CQL Shell with AI assistance" \
            --maintainer "CQLAI Team" \
            --url "https://github.com/axonops/cqlai" \
            --license "Apache-2.0" \
            --vendor "AxonOps" \
            --depends "libc6" \
            --after-install scripts/post-install.sh \
            --before-remove scripts/pre-remove.sh \
            -C package \
            --prefix / \
            .
          
          # FPM already creates the file with the correct name, just verify it exists
          ls -la *.deb

      - name: Build RPM package
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          if [ -z "$VERSION" ]; then VERSION="0.0.1"; fi
          
          ARCH=${{ matrix.arch }}
          if [ "$ARCH" = "amd64" ]; then RPM_ARCH="x86_64"; fi
          if [ "$ARCH" = "arm64" ]; then RPM_ARCH="aarch64"; fi
          
          fpm -s dir -t rpm \
            --name ${PROJECT_NAME} \
            --version ${VERSION} \
            --iteration 1 \
            --architecture ${RPM_ARCH} \
            --description "Modern Cassandra CQL Shell with AI assistance" \
            --maintainer "CQLAI Team" \
            --url "https://github.com/axonops/cqlai" \
            --license "Apache-2.0" \
            --vendor "AxonOps" \
            --depends "glibc" \
            --after-install scripts/post-install.sh \
            --before-remove scripts/pre-remove.sh \
            -C package \
            --prefix / \
            .
          
          # FPM creates the file with the correct name, just verify it exists
          ls -la *.rpm

      - name: Upload DEB package
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.arch }}
          path: "*.deb"
          retention-days: 7

      - name: Upload RPM package
        uses: actions/upload-artifact@v4
        with:
          name: rpm-${{ matrix.arch }}
          path: "*.rpm"
          retention-days: 7

  # Security scanning with ClamAV
  clamav-scan:
    name: ClamAV Security Scan
    runs-on: ubuntu-latest
    needs: [build, build-packages]
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Install ClamAV
        run: |
          sudo apt-get update
          sudo apt-get install -y clamav clamav-daemon
          sudo systemctl stop clamav-freshclam
          sudo freshclam
          sudo systemctl start clamav-freshclam

      - name: Scan artifacts with ClamAV
        run: |
          # Wait for database to be ready
          sleep 10
          
          # Scan all artifacts
          clamscan -r --infected --remove=no --log=clamav-scan.log artifacts/
          
          # Check for infections
          if grep -q "FOUND" clamav-scan.log; then
            echo "::error::ClamAV detected potential threats!"
            cat clamav-scan.log
            exit 1
          else
            echo "âœ… ClamAV scan completed - no threats detected"
          fi

      - name: Upload ClamAV scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: clamav-scan-results
          path: clamav-scan.log
          retention-days: 30

  # SBOM generation with Syft
  generate-sbom:
    name: Generate SBOM with Syft
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download linux amd64 artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-linux-amd64
          path: dist/

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM for source
        run: |
          syft dir:. -o spdx-json > sbom-source.spdx.json
          syft dir:. -o cyclonedx-json > sbom-source.cyclonedx.json
          syft dir:. -o text > sbom-source.txt

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: |
            sbom-*.json
            sbom-*.txt
          retention-days: 30

  # Vulnerability scanning with Grype
  vulnerability-scan:
    name: Vulnerability Scan with Grype
    runs-on: ubuntu-latest
    needs: [generate-sbom]
    
    steps:
      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom
          path: .

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan source SBOM for vulnerabilities
        run: |
          grype sbom:sbom-source.spdx.json -o json > vulnerabilities-source.json
          grype sbom:sbom-source.spdx.json -o table > vulnerabilities-source.txt
          
          # Also create a summary
          echo "## Vulnerability Scan Summary" > vulnerability-report.md
          echo "" >> vulnerability-report.md
          grype sbom:sbom-source.spdx.json -o table --fail-on high >> vulnerability-report.md || true

      - name: Upload vulnerability scan results
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-scan
          path: |
            vulnerabilities-*.json
            vulnerabilities-*.txt
            vulnerability-report.md
          retention-days: 30

      - name: Comment PR with vulnerability report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('vulnerability-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Create release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, build-packages, clamav-scan, vulnerability-scan]
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release
          
          # Copy all build artifacts
          find artifacts -name "*.tar.gz" -exec cp {} release/ \;
          find artifacts -name "*.zip" -exec cp {} release/ \;
          find artifacts -name "*.deb" -exec cp {} release/ \;
          find artifacts -name "*.rpm" -exec cp {} release/ \;
          
          # Copy SBOM and scan results
          cp artifacts/sbom/* release/
          cp artifacts/vulnerability-scan/vulnerability-report.md release/
          
          # Create checksums
          cd release
          sha256sum * > SHA256SUMS
          cd ..

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}