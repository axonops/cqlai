# Makefile for building and packaging CQLAI
# This extends the main Makefile with packaging targets

VERSION ?= $(shell git describe --tags --always --dirty 2>/dev/null || echo "dev")
PROJECT_NAME := cqlai
BUILD_DIR := dist
PACKAGE_DIR := package

# Supported platforms
PLATFORMS := linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64

# Go build settings
GO := go
GOFLAGS := -ldflags="-w -s -X main.version=$(VERSION)"
CGO_ENABLED := 0

.PHONY: all clean build-all package-all licenses sbom scan

all: clean build-all package-all

clean:
	rm -rf $(BUILD_DIR) $(PACKAGE_DIR) licenses/

# Create directories
$(BUILD_DIR) $(PACKAGE_DIR) licenses:
	mkdir -p $@

# Generate license attributions
licenses: licenses
	@echo "Generating license attributions..."
	@go install github.com/google/go-licenses@latest
	@go-licenses save ./cmd/cqlai --save_path=licenses --force
	@go-licenses report ./cmd/cqlai > licenses/THIRD_PARTY_NOTICES.txt
	@cat LICENSE > licenses/LICENSE
	@echo "\n\n=== Third Party Licenses ===\n" >> licenses/LICENSE
	@cat licenses/THIRD_PARTY_NOTICES.txt >> licenses/LICENSE

# Build for all platforms
build-all: $(BUILD_DIR)
	@for platform in $(PLATFORMS); do \
		GOOS=$${platform%/*} GOARCH=$${platform#*/} $(MAKE) build-platform; \
	done

# Build for specific platform
build-platform:
	@echo "Building for $(GOOS)/$(GOARCH)..."
	@OUTPUT=$(PROJECT_NAME)-$(GOOS)-$(GOARCH); \
	if [ "$(GOOS)" = "windows" ]; then OUTPUT="$${OUTPUT}.exe"; fi; \
	CGO_ENABLED=$(CGO_ENABLED) GOOS=$(GOOS) GOARCH=$(GOARCH) \
		$(GO) build $(GOFLAGS) -o $(BUILD_DIR)/$${OUTPUT} ./cmd/cqlai

# Build Linux packages
package-linux: $(PACKAGE_DIR)
	@echo "Building Linux packages..."
	@$(MAKE) package-deb-amd64
	@$(MAKE) package-deb-arm64
	@$(MAKE) package-rpm-amd64
	@$(MAKE) package-rpm-arm64

# Build DEB package for amd64
package-deb-amd64: build-linux-amd64 licenses
	@echo "Building DEB package for amd64..."
	@$(MAKE) prepare-package-structure ARCH=amd64
	@fpm -s dir -t deb \
		--name $(PROJECT_NAME) \
		--version $(VERSION) \
		--architecture amd64 \
		--description "Modern Cassandra CQL Shell with AI assistance" \
		--maintainer "CQLAI Team" \
		--url "https://github.com/axonops/cqlai" \
		--license "Apache-2.0" \
		--vendor "AxonOps" \
		--depends "libc6" \
		--after-install scripts/post-install.sh \
		--before-remove scripts/pre-remove.sh \
		-C $(PACKAGE_DIR) \
		--prefix / \
		.
	@mv *.deb $(BUILD_DIR)/$(PROJECT_NAME)_$(VERSION)_amd64.deb

# Build DEB package for arm64
package-deb-arm64: build-linux-arm64 licenses
	@echo "Building DEB package for arm64..."
	@$(MAKE) prepare-package-structure ARCH=arm64
	@fpm -s dir -t deb \
		--name $(PROJECT_NAME) \
		--version $(VERSION) \
		--architecture arm64 \
		--description "Modern Cassandra CQL Shell with AI assistance" \
		--maintainer "CQLAI Team" \
		--url "https://github.com/axonops/cqlai" \
		--license "Apache-2.0" \
		--vendor "AxonOps" \
		--depends "libc6" \
		--after-install scripts/post-install.sh \
		--before-remove scripts/pre-remove.sh \
		-C $(PACKAGE_DIR) \
		--prefix / \
		.
	@mv *.deb $(BUILD_DIR)/$(PROJECT_NAME)_$(VERSION)_arm64.deb

# Build RPM package for x86_64
package-rpm-amd64: build-linux-amd64 licenses
	@echo "Building RPM package for x86_64..."
	@$(MAKE) prepare-package-structure ARCH=amd64
	@fpm -s dir -t rpm \
		--name $(PROJECT_NAME) \
		--version $(VERSION) \
		--architecture x86_64 \
		--description "Modern Cassandra CQL Shell with AI assistance" \
		--maintainer "CQLAI Team" \
		--url "https://github.com/axonops/cqlai" \
		--license "Apache-2.0" \
		--vendor "AxonOps" \
		--depends "glibc" \
		--after-install scripts/post-install.sh \
		--before-remove scripts/pre-remove.sh \
		-C $(PACKAGE_DIR) \
		--prefix / \
		.
	@mv *.rpm $(BUILD_DIR)/$(PROJECT_NAME)-$(VERSION)-1.x86_64.rpm

# Build RPM package for aarch64
package-rpm-arm64: build-linux-arm64 licenses
	@echo "Building RPM package for aarch64..."
	@$(MAKE) prepare-package-structure ARCH=arm64
	@fpm -s dir -t rpm \
		--name $(PROJECT_NAME) \
		--version $(VERSION) \
		--architecture aarch64 \
		--description "Modern Cassandra CQL Shell with AI assistance" \
		--maintainer "CQLAI Team" \
		--url "https://github.com/axonops/cqlai" \
		--license "Apache-2.0" \
		--vendor "AxonOps" \
		--depends "glibc" \
		--after-install scripts/post-install.sh \
		--before-remove scripts/pre-remove.sh \
		-C $(PACKAGE_DIR) \
		--prefix / \
		.
	@mv *.rpm $(BUILD_DIR)/$(PROJECT_NAME)-$(VERSION)-1.aarch64.rpm

# Prepare package directory structure
prepare-package-structure:
	@echo "Preparing package structure for $(ARCH)..."
	@rm -rf $(PACKAGE_DIR)
	@mkdir -p $(PACKAGE_DIR)/usr/bin
	@mkdir -p $(PACKAGE_DIR)/usr/share/$(PROJECT_NAME)
	@mkdir -p $(PACKAGE_DIR)/usr/share/doc/$(PROJECT_NAME)
	@mkdir -p $(PACKAGE_DIR)/etc/$(PROJECT_NAME)
	@cp $(BUILD_DIR)/$(PROJECT_NAME)-linux-$(ARCH) $(PACKAGE_DIR)/usr/bin/$(PROJECT_NAME)
	@chmod 755 $(PACKAGE_DIR)/usr/bin/$(PROJECT_NAME)
	@cp -r licenses/* $(PACKAGE_DIR)/usr/share/doc/$(PROJECT_NAME)/
	@cp README.md $(PACKAGE_DIR)/usr/share/doc/$(PROJECT_NAME)/
	@cp cqlai.json.example $(PACKAGE_DIR)/etc/$(PROJECT_NAME)/

# Build specific platform targets
build-linux-amd64:
	@$(MAKE) build-platform GOOS=linux GOARCH=amd64

build-linux-arm64:
	@$(MAKE) build-platform GOOS=linux GOARCH=arm64

build-darwin-amd64:
	@$(MAKE) build-platform GOOS=darwin GOARCH=amd64

build-darwin-arm64:
	@$(MAKE) build-platform GOOS=darwin GOARCH=arm64

build-windows-amd64:
	@$(MAKE) build-platform GOOS=windows GOARCH=amd64

# Generate SBOM using Syft
sbom: $(BUILD_DIR)
	@echo "Generating SBOM..."
	@command -v syft >/dev/null 2>&1 || { \
		echo "Installing Syft..."; \
		curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /tmp; \
		export PATH=/tmp:$$PATH; \
	}
	@syft dir:. -o spdx-json > $(BUILD_DIR)/sbom-source.spdx.json
	@syft dir:. -o cyclonedx-json > $(BUILD_DIR)/sbom-source.cyclonedx.json
	@echo "SBOM generated in $(BUILD_DIR)/"

# Vulnerability scanning
scan: sbom
	@echo "Running vulnerability scan..."
	@command -v grype >/dev/null 2>&1 || { \
		echo "Installing Grype..."; \
		curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /tmp; \
		export PATH=/tmp:$$PATH; \
	}
	@grype sbom:$(BUILD_DIR)/sbom-source.spdx.json -o table
	@grype sbom:$(BUILD_DIR)/sbom-source.spdx.json -o json > $(BUILD_DIR)/vulnerabilities.json

# ClamAV scanning
clamav-scan: build-all
	@echo "Running ClamAV scan..."
	@command -v clamscan >/dev/null 2>&1 || { \
		echo "ClamAV not installed. Please install ClamAV to run virus scan."; \
		exit 1; \
	}
	@freshclam || true
	@clamscan -r --infected --remove=no $(BUILD_DIR)/

# Create release archives
release: build-all licenses
	@echo "Creating release archives..."
	@for platform in $(PLATFORMS); do \
		OS=$${platform%/*}; \
		ARCH=$${platform#*/}; \
		BINARY=$(PROJECT_NAME)-$$OS-$$ARCH; \
		if [ "$$OS" = "windows" ]; then \
			BINARY="$${BINARY}.exe"; \
			ARCHIVE="$(PROJECT_NAME)-$$OS-$$ARCH-$(VERSION).zip"; \
			cd $(BUILD_DIR) && zip -r $$ARCHIVE $$BINARY ../licenses ../README.md && cd ..; \
		else \
			ARCHIVE="$(PROJECT_NAME)-$$OS-$$ARCH-$(VERSION).tar.gz"; \
			tar czf $(BUILD_DIR)/$$ARCHIVE -C $(BUILD_DIR) $$BINARY -C .. licenses README.md; \
		fi; \
		echo "Created $(BUILD_DIR)/$$ARCHIVE"; \
	done

# Install FPM for package building
install-fpm:
	@echo "Installing FPM..."
	@command -v fpm >/dev/null 2>&1 || { \
		sudo apt-get update && \
		sudo apt-get install -y ruby ruby-dev rubygems build-essential rpm && \
		sudo gem install --no-document fpm; \
	}

# Docker build
docker-build:
	@echo "Building Docker image..."
	@docker build -f Dockerfile.build -t $(PROJECT_NAME):$(VERSION) \
		--build-arg VERSION=$(VERSION) .

# Help target
help:
	@echo "CQLAI Packaging Makefile"
	@echo ""
	@echo "Available targets:"
	@echo "  all              - Clean, build all platforms, and create packages"
	@echo "  clean            - Remove build artifacts"
	@echo "  build-all        - Build binaries for all platforms"
	@echo "  package-linux    - Build all Linux packages (DEB and RPM)"
	@echo "  licenses         - Generate license attributions"
	@echo "  sbom             - Generate Software Bill of Materials"
	@echo "  scan             - Run vulnerability scanning"
	@echo "  clamav-scan      - Run ClamAV virus scan"
	@echo "  release          - Create release archives"
	@echo "  docker-build     - Build Docker image"
	@echo "  help             - Show this help message"
	@echo ""
	@echo "Variables:"
	@echo "  VERSION          - Version string (default: git tag or 'dev')"
	@echo ""
	@echo "Examples:"
	@echo "  make build-all                    # Build for all platforms"
	@echo "  make package-linux                # Build Linux packages"
	@echo "  make VERSION=1.0.0 release        # Create release with specific version"